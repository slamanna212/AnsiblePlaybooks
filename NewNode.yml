---
- hosts: localhost
  vars_prompt:
    - name: droplet_type
      prompt: "What type of Droplet would you like to create? Choices: web | loadbalancer (Type exactly as seen here)"
      private: no
  tasks: 
        - name: Genrate Random Number for Droplet name
          set_fact:
            num: "{{99 | random(start=11) }}"

# WEB SERVER
        - name: Create a new Web Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-Web{{ num }}v
            size: s-1vcpu-1gb-amd
            region: nyc3
            tags: bene, web
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "web"             
          register: web_droplet_create_temp


 #LOADBALANCER
        - name: Create a new Loadbalancer Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-LB{{ num }}v
            size: s-1vcpu-1gb-amd
            region: nyc3
            tags: bene, loadbalancers
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "loadbalancer"   
          register: lb_droplet_create_temp



# Droplet Creation commnad does not pass IP addresses, using seperate task to grab IP address

# WEB SERVER

        - name: Get Private IP address of new Web Droplet
          community.digitalocean.digital_ocean_droplet_info:
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            id: "{{ web_droplet_create_temp.data.droplet.id }}"
          register: web_droplet_temp
          when: droplet_type == "web"


        - name: Add the new Web Droplet to the inventory file
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[webservers\]"
            line="{{ web_droplet_temp.data[0].name }} ansible_host={{  (web_droplet_temp.data[0].networks.v4[1].ip_address) }}"
          when: droplet_type == "web" 



# LOADBALANCER

        - name: Get Private IP address of new Loadbalancer Droplet
          community.digitalocean.digital_ocean_droplet_info:
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            id: "{{ lb_droplet_create_temp.data.droplet.id }}"
          register: droplet_temp
          when: droplet_type == "loadbalancer"

        - name: Add the new Loadbalancer Droplet to the inventory file
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[loadbalancers\]"
            line="{{ lb_droplet_temp.data[0].name }} ansible_host={{  (lb_droplet_temp.data[0].networks.v4[1].ip_address) }}"
          when: droplet_type == "loadbalancer"      
 
#Baseline Configuration
        - name: Run baseline config on Droplet
          include_role:
            name: ubuntu20
          vars:
            ansible_ssh_private_key_file: ~/.ssh/doinit
            ansible_ssh_user: root  


#Refresh Inventory File to pick up new host

        - meta: refresh_inventory




# Integrate it into the existing infrastructure
- name: Configure and deploy the web tier
  hosts: webservers
  become: true
  roles:
    - nfs_client
    - nginx

    
- name: Configure and deploy the balance tier
  hosts: loadbalancers
  become: true
  vars:
    backends: "{{ groups['webservers'] }}"
  roles:
    - haproxy
