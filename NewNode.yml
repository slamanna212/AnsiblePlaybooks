---
- hosts: localhost
  vars_prompt:
    - name: droplet_type
      prompt: "What type of Droplet would you like to create? Choices: web | loadbalancer | wpadmin | base (Type exactly as seen here)"
      private: no
  tasks: 
  #Have to generate a random number to be used in server name
        - name: Genrate Random Number for Droplet name
          set_fact:
            num: "{{ 99 | random(start=11) }}"

##### CREATION #####

# WEB SERVER
        - name: Create a new Web Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-Web{{ num }}v
            size: s-1vcpu-2gb-amd
            region: nyc3
            tags: 
              - "web"
              - "web_cluster"
              - "wc_backend"              
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "web"             
          register: droplet_create_temp


        - name: Create a new Control
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-CC02v
            size: s-1vcpu-2gb-amd
            region: nyc3
            tags: 
              - "command"
              - "web_cluster"
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "base"             
          register: droplet_create_temp

 #LOADBALANCER
        - name: Create a new Loadbalancer Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-LB{{ num }}v
            size: s-1vcpu-1gb-amd
            region: nyc3
            tags: 
              - "loadbalancers"
              - "web_cluster"
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "loadbalancer"   
          register: droplet_create_temp

# WP Admin
        - name: Create a new WP Admin Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-WPAdmin{{ num }}v
            size: s-1vcpu-2gb-amd
            region: nyc3
            tags: 
              - "wpadmin"
              - "web_cluster"
              - "wc_backend"              
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "wpadmin"             
          register: droplet_create_temp


        - name: Add provisioning tag to new droplet
          community.digitalocean.digital_ocean_tag:
            name: "provisioning"
            resource_id: {{ droplet_create_temp.data.droplet.id }
            state: present

##### PROVISIONING #####

#Refresh Inventory File to pick up new host
        - name: Refresh Inventory File
          meta: refresh_inventory

# Gather facts must be set to no to prevent ansible from trying to connect to new droplet over ssh before its ready
- name: Bring Droplet up to baseline
  hosts: provisioning
  gather_facts: no
  vars:
    ansible_ssh_private_key_file: ~/.ssh/doinit
    ansible_ssh_user: root
  roles:
    - pro_ubuntu20    


- hosts: localhost
  tasks: 
    - name: Remove provisioning tag from provisioned droplet
      community.digitalocean.digital_ocean_tag:
        name: "provisioning"
        resource_id: '{{ droplet_create_temp.data.droplet.id }}'
        state: absent

##### INTEGRATION #####

# Integrate it into the existing infrastructure
- name: Configure and deploy the web tier
  hosts: webservers
  become: true
  become_user: root            
  roles:
    - nfs_client
    - nginx
    - zabbix_agent        

- name: Configure and deploy the wp_admin tier
  hosts: wp_admin
  become: true
  become_user: root            
  roles:
    - nfs_client
    - wp_admin
    - zabbix_agent
  
- name: Deploy Wordpress Cron File to first WPAdmin host
  hosts: wp_admin[0]           
  become: true
  roles:
    - cron_wordpress

- name: Configure and deploy the balance tier
  hosts: loadbalancers
  become: true
  vars:
    webnodes: "{{ groups['webservers'] }}"
    wpanodes: "{{ groups['wp_admin'] }}"
  roles:
    - haproxy
    - zabbix_agent        