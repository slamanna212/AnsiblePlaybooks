---
- hosts: localhost
  vars_prompt:
    - name: droplet_type
      prompt: "What type of Droplet would you like to create? Choices: web | loadbalancer (Type exactly as seen here)"
      private: no
  tasks: 
  #Have to generate a random number to be used in server name
        - name: Genrate Random Number for Droplet name
          set_fact:
            num: "{{99 | random(start=11) }}"

##### CREATION #####

# WEB SERVER
        - name: Create a new Web Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-Web{{ num }}v
            size: s-1vcpu-1gb-amd
            region: nyc3
            tags: bene, web
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "web"             
          register: web_droplet_create_temp


 #LOADBALANCER
        - name: Create a new Loadbalancer Droplet
          community.digitalocean.digital_ocean_droplet:
            state: present
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            name: Bene-NYC-LB{{ num }}v
            size: s-1vcpu-1gb-amd
            region: nyc3
            tags: bene, loadbalancers
            image: ubuntu-20-04-x64
            project: Bene IT Websites
            wait_timeout: 500
            ssh_keys: [ a6:84:ee:f8:05:03:7d:24:09:d2:68:84:8e:d3:72:49 ]
          when: droplet_type == "loadbalancer"   
          register: lb_droplet_create_temp

# Droplet Creation commnad does not pass IP addresses, using seperate task to grab IP address

# WEB SERVER
        - name: Get Private IP address of new Web Droplet
          community.digitalocean.digital_ocean_droplet_info:
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            id: "{{ web_droplet_create_temp.data.droplet.id }}"
          register: web_droplet_temp
          when: droplet_type == "web"


        - name: Add the new Web Droplet to the inventory file
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[webservers\]"
            line="{{ web_droplet_temp.data[0].name }} ansible_host={{ (web_droplet_temp.data[0].networks.v4[1].ip_address) }}"
          when: droplet_type == "web" 

        - name: Add the new Web Droplet to the inventory file again for provisioning
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[provisioning\]"
            line="{{ web_droplet_temp.data[0].name }} ansible_host={{ (web_droplet_temp.data[0].networks.v4[1].ip_address) }} beingprovisioned=true"
          when: droplet_type == "web" 


# LOADBALANCER
        - name: Get Private IP address of new Loadbalancer Droplet
          community.digitalocean.digital_ocean_droplet_info:
            oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
            id: "{{ lb_droplet_create_temp.data.droplet.id }}"
          register: droplet_temp
          when: droplet_type == "loadbalancer"

        - name: Add the new Loadbalancer Droplet to the inventory file
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[loadbalancers\]"
            line="{{ lb_droplet_temp.data[0].name }} ansible_host={{  (lb_droplet_temp.data[0].networks.v4[1].ip_address) }}"
          when: droplet_type == "loadbalancer"  

        - name: Add the new Loadbalancer Droplet to the inventory file again for provisioning
          become: true
          ansible.builtin.lineinfile:
            path=/etc/ansible/hosts
            state=present
            insertafter="\[provisioning\]"
            line="{{ lb_droplet_temp.data[0].name }} ansible_host={{ (lb_droplet_temp.data[0].networks.v4[1].ip_address) }} beingprovisioned=true"
          when: droplet_type == "loadbalancer"           


##### PROVISIONING #####

#Refresh Inventory File to pick up new host
        - meta: refresh_inventory


# Sometimes, the playbook will try to connect to new host befire SSH is available. Add pause here so below task does not error out
        - name: Pause for 10 seconds for Droplet to create
          pause:
            seconds: 10
            prompt: "Pausing to wait for Droplet to come up

# Everything above this line is localhost, below this line is other servers

- name: Run Baseline 
  retries: 5
  hosts: provisioning
  vars:
    ansible_ssh_private_key_file: ~/.ssh/doinit
    ansible_ssh_user: root
  roles:
    - ubuntu20    



#Figure out task to delete provisioning entries in inv file

##### INTEGRATION #####

# Integrate it into the existing infrastructure
- name: Configure and deploy the web tier
  hosts: webservers
  become: true
  roles:
    - nfs_client
    - nginx

    
- name: Configure and deploy the balance tier
  hosts: loadbalancers
  become: true
  vars:
    backends: "{{ groups['webservers'] }}"
  roles:
    - haproxy
